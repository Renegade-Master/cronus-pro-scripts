/************************************************\
|                                                |
| GPC SCRIPT for preventing AFK from triggering. |
| Also features a Random Number Generator.       |
|                                                |
\************************************************/

// Constant values
int AIM_CHANCE;
int INT_MAX;
int MAX_AIM_TIME;
int NO_AIM_TIME;
int STRAFE_TIME;
int TURN_SPEED;
int WALK_TIME;

// Time management
int lastTime;
int runTime;

// Runtime variables
int currentlyAiming;
int randNum;
int runAntiAfk;


/*******************\
| Initialise Script |
\*******************/
init {
	AIM_CHANCE = 20;
	INT_MAX = 32767;
	MAX_AIM_TIME = 3500;
	NO_AIM_TIME = 10000;
	STRAFE_TIME = 4000;
	TURN_SPEED = 75;
	WALK_TIME = 7500;

	lastTime = 0;
	runTime = 0;

	currentlyAiming = FALSE;
	randNum = 0;
	runAntiAfk = FALSE;
}


/***********\
| Main Loop |
\***********/
main {
	// Update runTime
	lastTime = runTime;
	runTime += get_rtime();

	// Turn ON the macro
	if (event_press(PS4_TRIANGLE) && event_press(PS4_SQUARE)) {
		runAntiAfk = TRUE;
	}

	// Turn OFF the macro
	if (event_press(PS4_CIRCLE) && event_press(PS4_CROSS)) {
		runAntiAfk = FALSE;
	}

	// If the macro should be ON
	if (runAntiAfk) {
		combo_run(ANTI_AFK);
	} else { // If the macro should be OFF
		combo_stop(ANTI_AFK);
	}
}


/*********\
| Actions |
\*********/

/**
* Anti AFK Macro
*/
combo ANTI_AFK {
	// Walk forwards
	call(WALK_FORWARDS);
	try_to_look();

	// Strafe to the side
	strafe_to_the_side();
	try_to_look();
}


/**
* Strafe to the right
*/
combo STRAFE_RIGHT {
	set_val(PS4_LX, 100);

	wait(STRAFE_TIME);

	set_val(PS4_LX, 0);
}


/**
* Strafe to the left
*/
combo STRAFE_LEFT {
	set_val(PS4_LX, -100);

	wait(STRAFE_TIME);

	set_val(PS4_LX, 0);
}


/**
* Walk forwards
*/
combo WALK_FORWARDS {
	set_val(PS4_LY, -100);

	wait(WALK_TIME);

	set_val(PS4_LY, 0);
}


/**
* Walk backwards
*/
combo WALK_BACKWARDS {
	set_val(PS4_LY, 100);

	wait(WALK_TIME);

	set_val(PS4_LY, 0);
}


/**
* Aim and look to right
*/
combo AIM_AND_LOOK_TO_RIGHT {
	currentlyAiming = TRUE;
	set_val(PS4_L2, 100);
	set_val(PS4_RX, TURN_SPEED);

	wait(MAX_AIM_TIME);

	set_val(PS4_RX, 0);
	set_val(PS4_L2, 0);
	currentlyAiming = FALSE;
}


/**
* Aim and look to left
*/
combo AIM_AND_LOOK_TO_LEFT {
	currentlyAiming = TRUE;
	set_val(PS4_L2, 100);
	set_val(PS4_RX, inv(TURN_SPEED));

	wait(MAX_AIM_TIME);

	set_val(PS4_RX, 0);
	set_val(PS4_L2, 0);
	currentlyAiming = FALSE;
}


/***********\
| Functions |
\***********/


/**
* Choose a side to strafe to
*/
function strafe_to_the_side() {

	// Randomly decide between strafing left or right
	if (random_number(0, 100) % 2) {
		combo_run(STRAFE_RIGHT);
	} else {
		combo_run(STRAFE_LEFT);
	}
}


/**
* Attempt to aim and look around
*/
function try_to_look() {
	// Sometimes aim and look around
	if ((random_number(0, 100) < AIM_CHANCE) && !currentlyAiming) {

		// Randomly decide between looking left or right
		if (random_number(0, 100) % 2) {
			combo_run(AIM_AND_LOOK_TO_RIGHT);
		} else {
			combo_run(AIM_AND_LOOK_TO_LEFT);
		}
	}
}


/**
* Pseudo Random Number Generator
*
*
* @param low Integer value representing minimum desired value.
* @param high Integer value representing maximum desired value.
*
* @return A random number between the specified HIGH and LOW values.
*/
function random_number(int low, int high) {
	randNum = abs(runTime % (high - low + 1) + low);

	// Debug random number
	set_val(TRACE_6, randNum);

	return randNum;
}
